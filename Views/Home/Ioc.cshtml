@inject ASP_P26.Services.Time.ITimeService timeService
@{
    ViewData["Title"] = "IoC";
}

<div class="text-center">
    <h1 class="display-4">Інверсія управління</h1>
</div>

@ViewData["timestamp"] -- @timeService.GetHashCode()

<p>
    Інверсія управління (Inversion of control, IoC) - архітектурний патерн, 
    який виділяє окремий компонент (контейнер/інжектор), до задач якого 
    належить управління життєвими циклами об'єктів проєкту. 
    Можна сказати, що замість використання конструкції new Object, 
    використовуються залежності - змінні, що встановлюються контейнером 
    при побудові об'єктів
</p>
<p>
    Організація складається з кількох етапів:
</p>
<ul>
    <li>Опис класів, що будуть спільними у проєкті - сервіси</li>
    <li>Реєстрація класів (типів) у контейнері із зазначенням виду життєвого циклу</li>
    <li>Декларація залежностей в інших класах (контролерах)</li>
    <li>Запуск задачі Resolve для вирішення послідовності впровадження залежностей
        (створення об'єктів)
    </li>
</ul>
<p>
    DIP (Dependency inversion principle) - принцип з SOLID, який рекомендує 
    створювати залежності від абстракцій максимального рівня. Висновок:
    сервіси описуються разом з інтерфейсами. Мінімальний новий сервіс - два 
    елементи: інтерфейс та клас. 
</p>
<p>
    DI - Dependency Injection - спосіб реалізації IoC шляхом передачі 
    посилань на об'єкти служб (сервісів) до точок інжекції
</p>
