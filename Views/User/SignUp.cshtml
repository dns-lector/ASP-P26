@model ASP_P26.Models.User.UserSignupPageModel
@{
    ViewData["Title"] = "Sign Up";
}

<div class="text-center">
    <h1 class="display-4">Реєстрація користувача</h1>
</div>

@if (Model.FormModel != null && Model.FormErrors?.Count == 0)
{
    <p class="alert alert-info" role="alert">
        Реєстрація пройшла успішно. Можете входити до системи.
    </p>
}
else
{
    String classAddon = "";
    String? errorMessage = null;
    String? value = null;

    @if(Model.FormModel != null)
    {
        <b>Є дані форми, @(Model.FormErrors?.Count ?? 0) помилок</b>
    }
    else
    {
        <i>Немає даних форми</i>
    }
    @if(Model.FormErrors?.ContainsKey("500") ?? false)
    {
        <p class="alert alert-danger" role="alert">
            @Model.FormErrors["500"]
        </p>
    }
    <form action="/User/Register" method="post" enctype="application/x-www-form-urlencoded">
        <div class="row">
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    @{
                        classAddon = Model.FormErrors == null ? ""
                            : (Model.FormErrors.ContainsKey("UserName") ? "is-invalid" : "is-valid");
                        Model.FormErrors?.TryGetValue("UserName", out errorMessage);
                        value = (Model.FormErrors?.Count ?? 0) > 0 ? Model.FormModel?.UserName : null;
                    }
                    <span class="input-group-text" id="user-name-addon"><i class="bi bi-person"></i></span>
                    <input name="user-name" type="text" class="form-control @classAddon" 
                           placeholder="Ім'я" value="@value"
                           aria-label="Ім'я" aria-describedby="user-name-addon" />
                    <div class="invalid-feedback">
                        @errorMessage
                    </div>
                </div>
            </div>
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    @{
                        classAddon = Model.FormErrors == null ? ""
                        : (Model.FormErrors.ContainsKey("UserEmail") ? "is-invalid" : "is-valid");
                        Model.FormErrors?.TryGetValue("UserEmail", out errorMessage);
                        value = (Model.FormErrors?.Count ?? 0) > 0 ? Model.FormModel?.UserEmail : null;
                    }
                    <span class="input-group-text" id="user-email-addon"><i class="bi bi-envelope-at"></i></span>
                    <input name="user-email" type="email" class="form-control @classAddon"
                           placeholder="E-mail" value="@value"
                           aria-label="E-mail" aria-describedby="user-email-addon">
                    <div class="invalid-feedback">@errorMessage</div>
                </div>
            </div>
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    @{
                        classAddon = Model.FormErrors == null ? ""
                        : (Model.FormErrors.ContainsKey("Birthdate") ? "is-invalid" : "is-valid");
                        Model.FormErrors?.TryGetValue("Birthdate", out errorMessage);
                        value = (Model.FormErrors?.Count ?? 0) > 0 ? Model.FormModel?.Birthdate?.ToString("yyyy-MM-dd") : null;
                    }
                    <span class="input-group-text" id="birthdate-addon"><i class="bi bi-cake"></i></span>
                    <input name="birthdate" type="date" class="form-control @classAddon"
                           placeholder="Дата народження" value="@value"
                           aria-label="Дата народження" aria-describedby="birthdate-addon">
                    <div class="invalid-feedback">@errorMessage</div>
                </div>
            </div>
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    @{
                        classAddon = Model.FormErrors == null ? ""
                        : (Model.FormErrors.ContainsKey("UserLogin") ? "is-invalid" : "is-valid");
                        Model.FormErrors?.TryGetValue("UserLogin", out errorMessage);
                        value = (Model.FormErrors?.Count ?? 0) > 0 ? Model.FormModel?.UserLogin : null;
                    }
                    <span class="input-group-text" id="user-login-addon"><i class="bi bi-key"></i></span>
                    <input name="user-login" type="text" class="form-control @classAddon"
                           placeholder="Логін" value="@value"
                           aria-label="Логін" aria-describedby="user-login-addon">
                    <div class="invalid-feedback">@errorMessage</div>
                </div>
            </div>
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="user-password-addon"><i class="bi bi-lock"></i></span>
                    <input name="user-password" type="password" class="form-control" placeholder="Пароль"
                           aria-label="Пароль" aria-describedby="user-password-addon">
                    <div class="invalid-feedback"></div>
                </div>
            </div>
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="user-repeat-addon"><i class="bi bi-unlock"></i></span>
                    <input name="user-repeat" type="password" class="form-control" placeholder="Повтор"
                           aria-label="Повтор" aria-describedby="user-repeat-addon">
                    <div class="invalid-feedback"></div>
                </div>
            </div>
        </div>

        <div class="form-check mb-3">
            <input name="agree" class="form-check-input" type="checkbox" value="" id="checkDefault">
            <label class="form-check-label" for="checkDefault">
                Не буду нічого порушувати
            </label>
        </div>
        <button name="btn" value="send" type="submit" class="btn btn-primary"><i class="bi bi-send-fill"></i> Надіслати</button>
    </form>

}

<h2>Робота з формами</h2>
<p class="alert alert-warning" role="alert">
    Форми передають дані. Це значить, що оновлення сторінки (після надсилання форми)
    призведе до повторного надсилання даних. Те ж саме буде при поверненні до 
    сторінки (навігацією назад)
</p>
<p>
    Для практичного використання вживається прийом "скидання даних", який 
    полягає в тому, що оброблення даних відбувається у два етапи:
    1. Приймаються дані форми та надсилається редірект 
    2. Повторний запит без параметрів відновлює збережені дані та обробляє їх
</p>
<pre>
    [Browser]    POST {FormData}      [Server]
     (form)---------------------------> | - *save* - Session
                  302 Redirect          |    |        ! не надсилати HTML 
        |<------------------------------     |          на запит з формою
        |        GET (no data)               |
        |------------------------------->  Process
                    HTML                     |
        <------------------------------------
</pre>
<p>
    Сесії (серверні сесії) - механізми розрізнення запитів з можливістю
    збереження даних на боці сервера, що стосуються конкретного запиту.
    Сесії реалізуються засобами Cookie - HTTP сутностей, які автоматично 
    пересилаються браузером після одержання їх від сервера. 
</p>
<pre>
    [Browser]                       [Server]
    1й запит --------------------------> включає сесію, створює її ID
                  Set-Cookie: x=ID       передає цей ID на клієнта
*save* <--------------------------------

                   Cookie: x=ID          перевіряє чи зареєстрована сесія з ID
    2й запит --------------------------> якщо є, то відновлює її дані
</pre>