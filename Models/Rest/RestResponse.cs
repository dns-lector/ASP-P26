namespace ASP_P26.Models.Rest
{
    public class RestResponse
    {
        public RestStatus Status { get; set; } = new();
        public RestMeta   Meta   { get; set; } = new();
        public Object?    Data   { get; set; }
    }
}
/* REST (Representational State Transfer) - набір архітектурних вимог
 * до програмного комплекса.
 * АРІ - (Application Program Interface) - інтерфейс взаємодії 
 *  програми із застосунками.
 *  Програма - інформаційний центр, частина у якій зберігаються всі дані
 *  Застосунок - самостійна частина, що використовує дані, які постачає Програма
 *   Зазвичай при одній Прогамі існує кілька Застосунків (сайт, десктоп, мобільний)
 *  (також Додаток - несамостійний продукт, що працює тільки у складі
 *    іншого продукту, - Плагін)
 *  АРІ - інтерфейс (набір правил) обміну даними між частинами комплексу
 *  REST - один з рекомендованих наборів таких правил
 *  - Client/Server – традиціно для веб
 *  - Stateless – відсутність стану ("пам'яті" про попередні дії - сесій)
 *  - Cache – відповідь сервера має містити дані про можливість кешування
 *  - Layered system – як аналог Middleware - можливість додавання проміжних
 *     шарів (проксі) між клієнтом та сервером
 *  - Code on demand (optional) – можливість передачі коду у складі відповіді
 *  - Uniform interface - єдиний вигляд запитів та відповідей
 *   = Resource identification in requests - включення даних про ресурс
 *   = Resource manipulation through representations - включення 
 *      метаданих про маніпуляцію ресурсом (CRUD)
 *   = Self-descriptive messages - включення даних про спосіб оброблення 
 *      (тип) переданого повідомлення
 *   = Hypermedia as the engine of application state (HATEOAS) - додавання
 *      змісту ресурсу (додаткові посилання на його підресурси)
 */
/* Обговорення.
 * Layered system: система має бути придатна до "вставляння" проксі.
 * [client] ---- [server]     [client] ---- [proxy] ---- [server]
 *  GET /x  <---> 404 NF       GET /x  <---> 500 IE <---> 404 NF
 * Висновок: бажано розділити статуси проходження запиту та його виконання.
 * [client] ---- [proxy] ---- [server]
 *  GET /x  <---> 200 OK <---> 200 OK
 *                (404 NF)     (404 NF)
 * Практична порада: ввести різні типи представлення статусу
 *  - логічний:  true/false 
 *  - числовий:  код
 *  - текстовий: фраза 
 *  
 *  
 * Метадані - дані які "супроводжують" ресурс, але безпосередньо не є
 *  його частиною. Визначаємо необхідні:
 * - тривалість кешування
 * - маніпуляція ресурсом
 * - тип даних ресурсу, що передаються
 * - перелік підресурсів
 * + додаткові
 * + підтвердження ідентифікації ресурсу
 * + мітка часу
 * ~ варіативні (в залежності від ресурсу)
 * ~ пагінація (номер сторінки, загальна кількість сторінок)
 * ~ прийняті параметри запиту (наприклад, пошуковий запит)
 * 
 * Приклад
 * {
 *      status: {...},
 *      meta: {
 *          serverTime: 161844684846,
 *          resource: "Shop API: 'product'",
 *          resourceUrl: "/api/product/pine-tree",
 *          cache: 3600,
 *          manipulations: [GET, POST, PATCH, DELETE], / без адмін-допуска [GET]
 *          dataType: "json/object",
 *          links: {                                   // (HATEOAS)
 *              "all": "/api/product",
 *              "id": "/api/product/id",
 *              "slug": "/api/product/slug",
 *              "img": "/api/product/slug?img={num}",
 *          },
 *          pagination: {
 *              "page": 2,
 *              "perPage": 20,
 *              "lastPage": 10,
 *              "totalItems": 195,
 *              "prevPage": "/api/product?page=1",
 *              "nextPage": "/api/product?page=3",
 *          }    
 *      },
 *      data: {
 *          name: "Ялинка"
 *          ...
 *      }
 * }
 * 
 */
/* Д.З. Перевести всі АРІ контролери на роботу з REST
 * Внести корекції до фронтенду (JS) щодо прийому даних 
 * та оброблення статусів виконання запитів.
 */